// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// schema.prisma

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Review        Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cafe {
  id          String        @id @default(cuid())
  name        String
  address     String
  city        String
  phoneNumber String
  website     String
  rating      Float
  themeList   EscapeTheme[]
}

model EscapeTheme {
  id             String   @id @default(cuid())
  name           String
  description    String
  timeLimitation Int
  imageURL       String
  cost           Int
  rating         Float
  cafeId         String
  cafe           Cafe     @relation(fields: [cafeId], references: [id])
  test           String   @default("test")
  reviewList     Review[]
}

model Review {
  id            String      @id @default(cuid())
  escapeThemeId String
  escapeTheme   EscapeTheme @relation(fields: [escapeThemeId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  rating        Float
  description   String
  createdAt     DateTime    @default(now())
}
